module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output led_strip
  ) {
  
  sig rst;                  // reset signal
  
  // enum for different led_states
  const LED_OFF = 2d0;
  const LED_RED = 2d1;
  const LED_GREEN = 2d2;
  const LED_BLUE = 2d3;
  
  var c;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    .rst(rst) {
      ws2812_man ws2812_man; 
    }
  }
  
  always {
    reset_cond.in = ~rst_n;    // input raw inverted reset signal
    rst = reset_cond.out;      // conditioned reset
    
    ws2812_man.data[0] = LED_OFF;
    ws2812_man.data[1] = LED_RED;
    ws2812_man.data[2] = LED_GREEN;
    ws2812_man.data[3] = LED_BLUE;
    ws2812_man.data[4] = LED_RED;
    ws2812_man.data[5] = LED_GREEN;
    ws2812_man.data[6] = LED_BLUE;
    ws2812_man.data[7] = LED_OFF;
    ws2812_man.data[8] = LED_RED;
    ws2812_man.data[9] = LED_GREEN;
    ws2812_man.data[10] = LED_BLUE;
    ws2812_man.data[11] = LED_RED;
    ws2812_man.data[12] = LED_GREEN;
    ws2812_man.data[13] = LED_BLUE;
    
    led_strip = ws2812_man.out;
    
    spi_miso = bz;             // not using SPI
    spi_channel = bzzzz;       // not using flags
    avr_rx = bz;               // not using serial port
  }
}